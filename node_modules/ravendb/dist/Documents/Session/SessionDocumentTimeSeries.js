"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionDocumentTimeSeries = void 0;
const SessionTimeSeriesBase_1 = require("./SessionTimeSeriesBase");
const TypeUtil_1 = require("../../Utility/TypeUtil");
class SessionDocumentTimeSeries extends SessionTimeSeriesBase_1.SessionTimeSeriesBase {
    constructor(session, documentIdOrEntity, name) {
        super(session, documentIdOrEntity, name);
    }
    get(startOrFrom, toOrPageSize, startOrIncludes, startOrPageSize, pageSize) {
        if (TypeUtil_1.TypeUtil.isNullOrUndefined(startOrFrom)) {
            return this._getInternal(null, null, null, 0, TypeUtil_1.TypeUtil.MAX_INT32);
        }
        else if (TypeUtil_1.TypeUtil.isNumber(startOrFrom)) {
            return this._getInternal(null, null, null, startOrFrom, toOrPageSize);
        }
        else if (TypeUtil_1.TypeUtil.isFunction(startOrIncludes)) {
            return this._getInternal(startOrFrom, toOrPageSize, startOrIncludes, startOrPageSize, pageSize);
        }
        else if (TypeUtil_1.TypeUtil.isNumber(startOrIncludes)) {
            return this._getInternal(startOrFrom, toOrPageSize, null, startOrPageSize, pageSize);
        }
        else {
            return this._getInternal(startOrFrom, toOrPageSize, null, 0, TypeUtil_1.TypeUtil.MAX_INT32);
        }
    }
    async _getInternal(from, to, includes, start, pageSize) {
        if (this._notInCache(from, to)) {
            return this.getTimeSeriesAndIncludes(from, to, includes, start, pageSize);
        }
        const resultsToUser = await this._serveFromCache(from, to, start, pageSize, includes);
        if (!resultsToUser) {
            return null;
        }
        return resultsToUser.slice(0, pageSize);
    }
    append(timestamp, valueOrValues, tag) {
        return this._appendInternal(timestamp, valueOrValues, tag);
    }
}
exports.SessionDocumentTimeSeries = SessionDocumentTimeSeries;
//# sourceMappingURL=SessionDocumentTimeSeries.js.map